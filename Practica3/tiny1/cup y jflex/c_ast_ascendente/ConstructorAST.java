
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 08 19:14:05 CEST 2022
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import semops.SemOps;
import asint.TinyASint.Prog;
import asint.TinyASint.LDecs;
import asint.TinyASint.Dec;
import asint.TinyASint.LPF;
import asint.TinyASint.PF;
import asint.TinyASint.Tipo;
import asint.TinyASint.LCampo;
import asint.TinyASint.Campo;
import asint.TinyASint.LInst;
import asint.TinyASint.Inst;
import asint.TinyASint.LInst_aux;
import asint.TinyASint.LParreg;
import asint.TinyASint.Bloque;
import asint.TinyASint.Exp;
import asint.TinyASint.StringLocalizado;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 08 19:14:05 CEST 2022
  */
public class ConstructorAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\010\000\002\004\007\000" +
    "\002\005\005\000\002\005\003\000\002\006\005\000\002" +
    "\006\004\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\010\000\002\007\006" +
    "\000\002\007\004\000\002\007\003\000\002\010\005\000" +
    "\002\010\003\000\002\011\004\000\002\012\005\000\002" +
    "\012\003\000\002\013\005\000\002\013\007\000\002\013" +
    "\011\000\002\013\007\000\002\014\003\000\002\014\002" +
    "\000\002\013\004\000\002\013\004\000\002\013\003\000" +
    "\002\013\004\000\002\013\004\000\002\013\007\000\002" +
    "\013\006\000\002\013\003\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\003\000\002\020\005\000\002\020\003\000" +
    "\002\021\005\000\002\021\003\000\002\022\005\000\002" +
    "\022\003\000\002\023\004\000\002\023\004\000\002\023" +
    "\003\000\002\024\006\000\002\024\005\000\002\024\005" +
    "\000\002\024\003\000\002\025\004\000\002\025\003\000" +
    "\002\026\005\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\060\010\017\011\023\022\011\026\050\037" +
    "\004\040\007\043\024\045\005\046\014\047\020\053\047" +
    "\056\033\063\032\064\012\065\021\066\027\067\013\070" +
    "\031\071\006\072\034\073\022\074\026\075\016\001\002" +
    "\000\072\002\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\023\uffc0\024\uffc0\025\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\041\uffc0\042\uffc0\050\uffc0\051\uffc0" +
    "\052\uffc0\054\uffc0\055\uffc0\001\002\000\072\002\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\041\uffc3\042\uffc3\050\uffc3\051\uffc3\052\uffc3\054\uffc3\055" +
    "\uffc3\001\002\000\030\010\017\011\023\022\011\037\004" +
    "\040\007\043\024\045\005\072\034\073\022\074\026\075" +
    "\016\001\002\000\072\002\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\041\uffc1\042\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\054\uffc1\055\uffc1\001\002\000\010" +
    "\002\uffff\005\057\027\uffff\001\002\000\030\010\017\011" +
    "\023\022\011\037\004\040\007\043\024\045\005\072\034" +
    "\073\022\074\026\075\016\001\002\000\030\010\017\011" +
    "\023\022\011\037\004\040\007\043\024\045\005\072\034" +
    "\073\022\074\026\075\016\001\002\000\022\034\140\035" +
    "\133\036\141\044\136\057\135\060\134\062\132\074\131" +
    "\001\002\000\004\074\201\001\002\000\006\004\176\005" +
    "\175\001\002\000\072\002\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\041\uffbd\042\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\001\002\000\024" +
    "\011\023\022\011\037\004\040\007\045\005\072\034\073" +
    "\022\074\026\075\016\001\002\000\030\010\017\011\023" +
    "\022\011\037\004\040\007\043\024\045\005\072\034\073" +
    "\022\074\026\075\016\001\002\000\030\010\017\011\023" +
    "\022\011\037\004\040\007\043\024\045\005\072\034\073" +
    "\022\074\026\075\016\001\002\000\072\002\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\041" +
    "\uffbf\042\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf\055\uffbf" +
    "\001\002\000\024\011\023\022\011\037\004\040\007\045" +
    "\005\072\034\073\022\074\026\075\016\001\002\000\030" +
    "\010\017\011\023\022\011\037\004\040\007\043\024\045" +
    "\005\072\034\073\022\074\026\075\016\001\002\000\016" +
    "\002\uffda\005\uffda\027\uffda\051\uffda\052\uffda\055\uffda\001" +
    "\002\000\072\002\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\023\uffc2\024\uffc2\025\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\041\uffc2\042\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\054\uffc2\055\uffc2\001\002\000\016\002\uffdf" +
    "\005\uffdf\027\uffdf\051\uffdf\052\uffdf\055\uffdf\001\002\000" +
    "\004\002\161\001\002\000\022\034\140\035\133\036\141" +
    "\044\136\057\135\060\134\062\132\074\131\001\002\000" +
    "\030\010\017\011\023\022\011\037\004\040\007\043\024" +
    "\045\005\072\034\073\022\074\026\075\016\001\002\000" +
    "\004\074\120\001\002\000\072\002\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\041\uffbe\042" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\054\uffbe\055\uffbe\001\002" +
    "\000\006\004\ufffd\005\ufffd\001\002\000\072\002\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\041\uffc5\042\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\055" +
    "\uffc5\001\002\000\072\002\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\041\uffc7\042\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\054\uffc7\055\uffc7\001\002\000\072" +
    "\002\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\023\uffcb\024\113\025\uffcb\027\uffcb\030\112\031" +
    "\uffcb\032\111\041\uffcb\042\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\054\uffcb\055\uffcb\001\002\000\064\002\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\104\012\107\013\105\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce\025" +
    "\uffce\027\uffce\031\uffce\041\uffce\042\uffce\050\uffce\051\uffce" +
    "\052\uffce\054\uffce\055\uffce\001\002\000\056\002\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\023\uffd0\025\uffd0\027\uffd0\031" +
    "\uffd0\041\uffd0\042\uffd0\050\uffd0\051\uffd0\052\uffd0\054\uffd0" +
    "\055\uffd0\001\002\000\056\002\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\014\074\015\075\016\077\017\100\020\073" +
    "\021\072\023\uffd2\025\uffd2\027\uffd2\031\uffd2\041\uffd2\042" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\054\uffd2\055\uffd2\001\002" +
    "\000\016\002\uffe8\005\uffe8\027\uffe8\051\uffe8\052\uffe8\055" +
    "\uffe8\001\002\000\042\002\uffd4\005\uffd4\006\uffd4\007\065" +
    "\010\066\023\uffd4\025\uffd4\027\uffd4\031\uffd4\041\070\042" +
    "\064\050\uffd4\051\uffd4\052\uffd4\054\uffd4\055\uffd4\001\002" +
    "\000\004\006\062\001\002\000\030\010\017\011\023\022" +
    "\011\037\004\040\007\043\024\045\005\072\034\073\022" +
    "\074\026\075\016\001\002\000\060\010\017\011\023\022" +
    "\011\026\050\037\004\040\007\043\024\045\005\046\014" +
    "\047\020\053\047\056\033\063\032\064\012\065\021\066" +
    "\027\067\013\070\031\071\006\072\034\073\022\074\026" +
    "\075\016\001\002\000\004\027\052\001\002\000\020\002" +
    "\uffd7\004\uffd7\005\uffd7\027\uffd7\051\uffd7\052\uffd7\055\uffd7" +
    "\001\002\000\004\054\054\001\002\000\054\010\017\011" +
    "\023\022\011\026\050\037\004\040\007\043\024\045\005" +
    "\047\020\053\047\055\uffe2\056\033\063\032\064\012\065" +
    "\021\066\027\071\006\072\034\073\022\074\026\075\016" +
    "\001\002\000\004\055\061\001\002\000\012\005\057\051" +
    "\uffe3\052\uffe3\055\uffe3\001\002\000\052\010\017\011\023" +
    "\022\011\026\050\037\004\040\007\043\024\045\005\047" +
    "\020\053\047\056\033\063\032\064\012\065\021\066\027" +
    "\071\006\072\034\073\022\074\026\075\016\001\002\000" +
    "\016\002\uffe9\005\uffe9\027\uffe9\051\uffe9\052\uffe9\055\uffe9" +
    "\001\002\000\016\002\uffe4\005\uffe4\027\uffe4\051\uffe4\052" +
    "\uffe4\055\uffe4\001\002\000\030\010\017\011\023\022\011" +
    "\037\004\040\007\043\024\045\005\072\034\073\022\074" +
    "\026\075\016\001\002\000\016\002\uffe7\005\uffe7\027\uffe7" +
    "\051\uffe7\052\uffe7\055\uffe7\001\002\000\030\010\uffb2\011" +
    "\uffb2\022\uffb2\037\uffb2\040\uffb2\043\uffb2\045\uffb2\072\uffb2" +
    "\073\uffb2\074\uffb2\075\uffb2\001\002\000\030\010\017\011" +
    "\023\022\011\037\004\040\007\043\024\045\005\072\034" +
    "\073\022\074\026\075\016\001\002\000\030\010\017\011" +
    "\023\022\011\037\004\040\007\043\024\045\005\072\034" +
    "\073\022\074\026\075\016\001\002\000\030\010\017\011" +
    "\023\022\011\037\004\040\007\043\024\045\005\072\034" +
    "\073\022\074\026\075\016\001\002\000\030\010\uffb3\011" +
    "\uffb3\022\uffb3\037\uffb3\040\uffb3\043\uffb3\045\uffb3\072\uffb3" +
    "\073\uffb3\074\uffb3\075\uffb3\001\002\000\056\002\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\014\074\015\075\016\077" +
    "\017\100\020\073\021\072\023\uffd3\025\uffd3\027\uffd3\031" +
    "\uffd3\041\uffd3\042\uffd3\050\uffd3\051\uffd3\052\uffd3\054\uffd3" +
    "\055\uffd3\001\002\000\030\010\uffb9\011\uffb9\022\uffb9\037" +
    "\uffb9\040\uffb9\043\uffb9\045\uffb9\072\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\001\002\000\030\010\uffb8\011\uffb8\022\uffb8\037" +
    "\uffb8\040\uffb8\043\uffb8\045\uffb8\072\uffb8\073\uffb8\074\uffb8" +
    "\075\uffb8\001\002\000\030\010\uffb5\011\uffb5\022\uffb5\037" +
    "\uffb5\040\uffb5\043\uffb5\045\uffb5\072\uffb5\073\uffb5\074\uffb5" +
    "\075\uffb5\001\002\000\030\010\uffb4\011\uffb4\022\uffb4\037" +
    "\uffb4\040\uffb4\043\uffb4\045\uffb4\072\uffb4\073\uffb4\074\uffb4" +
    "\075\uffb4\001\002\000\030\010\017\011\023\022\011\037" +
    "\004\040\007\043\024\045\005\072\034\073\022\074\026" +
    "\075\016\001\002\000\030\010\uffb7\011\uffb7\022\uffb7\037" +
    "\uffb7\040\uffb7\043\uffb7\045\uffb7\072\uffb7\073\uffb7\074\uffb7" +
    "\075\uffb7\001\002\000\030\010\uffb6\011\uffb6\022\uffb6\037" +
    "\uffb6\040\uffb6\043\uffb6\045\uffb6\072\uffb6\073\uffb6\074\uffb6" +
    "\075\uffb6\001\002\000\056\002\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\023\uffd1\025\uffd1\027\uffd1\031\uffd1\041\uffd1\042" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\054\uffd1\055\uffd1\001\002" +
    "\000\036\002\uffd5\005\uffd5\006\uffd5\023\uffd5\025\uffd5\027" +
    "\uffd5\031\uffd5\041\070\042\064\050\uffd5\051\uffd5\052\uffd5" +
    "\054\uffd5\055\uffd5\001\002\000\032\002\uffd6\005\uffd6\006" +
    "\uffd6\023\uffd6\025\uffd6\027\uffd6\031\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\054\uffd6\055\uffd6\001\002\000\030\010\uffbc\011" +
    "\uffbc\022\uffbc\037\uffbc\040\uffbc\043\uffbc\045\uffbc\072\uffbc" +
    "\073\uffbc\074\uffbc\075\uffbc\001\002\000\030\010\uffba\011" +
    "\uffba\022\uffba\037\uffba\040\uffba\043\uffba\045\uffba\072\uffba" +
    "\073\uffba\074\uffba\075\uffba\001\002\000\030\010\017\011" +
    "\023\022\011\037\004\040\007\043\024\045\005\072\034" +
    "\073\022\074\026\075\016\001\002\000\030\010\uffbb\011" +
    "\uffbb\022\uffbb\037\uffbb\040\uffbb\043\uffbb\045\uffbb\072\uffbb" +
    "\073\uffbb\074\uffbb\075\uffbb\001\002\000\056\002\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\023\uffcf\025\uffcf\027\uffcf\031" +
    "\uffcf\041\uffcf\042\uffcf\050\uffcf\051\uffcf\052\uffcf\054\uffcf" +
    "\055\uffcf\001\002\000\004\074\117\001\002\000\004\074" +
    "\116\001\002\000\030\010\017\011\023\022\011\037\004" +
    "\040\007\043\024\045\005\072\034\073\022\074\026\075" +
    "\016\001\002\000\004\025\115\001\002\000\072\002\uffca" +
    "\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca" +
    "\023\uffca\024\uffca\025\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\041\uffca\042\uffca\050\uffca\051\uffca\052\uffca\054\uffca" +
    "\055\uffca\001\002\000\072\002\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\041\uffc8\042\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\054\uffc8\055\uffc8\001\002\000" +
    "\072\002\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\041\uffc9\042\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\054\uffc9\055\uffc9\001\002\000\004\022\121\001\002" +
    "\000\032\010\017\011\023\022\011\023\122\037\004\040" +
    "\007\043\024\045\005\072\034\073\022\074\026\075\016" +
    "\001\002\000\016\002\uffdb\005\uffdb\027\uffdb\051\uffdb\052" +
    "\uffdb\055\uffdb\001\002\000\006\023\uffd8\031\126\001\002" +
    "\000\004\023\125\001\002\000\016\002\uffdc\005\uffdc\027" +
    "\uffdc\051\uffdc\052\uffdc\055\uffdc\001\002\000\030\010\017" +
    "\011\023\022\011\037\004\040\007\043\024\045\005\072" +
    "\034\073\022\074\026\075\016\001\002\000\004\023\uffd9" +
    "\001\002\000\016\002\uffde\005\uffde\027\uffde\051\uffde\052" +
    "\uffde\055\uffde\001\002\000\006\033\uffed\074\uffed\001\002" +
    "\000\022\034\140\035\133\036\141\044\136\057\135\060" +
    "\134\062\132\074\131\001\002\000\006\033\ufff3\074\ufff3" +
    "\001\002\000\004\024\153\001\002\000\004\026\143\001" +
    "\002\000\006\033\ufff1\074\ufff1\001\002\000\004\074\142" +
    "\001\002\000\006\033\ufff2\074\ufff2\001\002\000\006\033" +
    "\ufff4\074\ufff4\001\002\000\006\004\ufffb\005\ufffb\001\002" +
    "\000\022\034\140\035\133\036\141\044\136\057\135\060" +
    "\134\062\132\074\131\001\002\000\006\005\150\027\151" +
    "\001\002\000\004\074\147\001\002\000\006\005\uffeb\027" +
    "\uffeb\001\002\000\006\005\uffea\027\uffea\001\002\000\022" +
    "\034\140\035\133\036\141\044\136\057\135\060\134\062" +
    "\132\074\131\001\002\000\006\033\uffef\074\uffef\001\002" +
    "\000\006\005\uffec\027\uffec\001\002\000\004\075\154\001" +
    "\002\000\004\025\155\001\002\000\004\061\156\001\002" +
    "\000\022\034\140\035\133\036\141\044\136\057\135\060" +
    "\134\062\132\074\131\001\002\000\006\033\ufff0\074\ufff0" +
    "\001\002\000\006\033\uffee\074\uffee\001\002\000\004\002" +
    "\000\001\002\000\064\002\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\023\uffcc\025\uffcc\027\uffcc" +
    "\031\uffcc\041\uffcc\042\uffcc\050\uffcc\051\uffcc\052\uffcc\054" +
    "\uffcc\055\uffcc\001\002\000\072\002\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\041\uffc6\042" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\054\uffc6\055\uffc6\001\002" +
    "\000\016\002\uffe0\005\uffe0\027\uffe0\051\uffe0\052\uffe0\055" +
    "\uffe0\001\002\000\004\050\166\001\002\000\056\010\017" +
    "\011\023\022\011\026\050\037\004\040\007\043\024\045" +
    "\005\047\020\051\uffe2\052\uffe2\053\047\056\033\063\032" +
    "\064\012\065\021\066\027\071\006\072\034\073\022\074" +
    "\026\075\016\001\002\000\006\051\171\052\170\001\002" +
    "\000\016\002\uffe6\005\uffe6\027\uffe6\051\uffe6\052\uffe6\055" +
    "\uffe6\001\002\000\054\010\017\011\023\022\011\026\050" +
    "\037\004\040\007\043\024\045\005\047\020\052\uffe2\053" +
    "\047\056\033\063\032\064\012\065\021\066\027\071\006" +
    "\072\034\073\022\074\026\075\016\001\002\000\004\052" +
    "\173\001\002\000\016\002\uffe5\005\uffe5\027\uffe5\051\uffe5" +
    "\052\uffe5\055\uffe5\001\002\000\072\002\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\023\uffcd\024" +
    "\113\025\uffcd\027\uffcd\030\112\031\uffcd\032\111\041\uffcd" +
    "\042\uffcd\050\uffcd\051\uffcd\052\uffcd\054\uffcd\055\uffcd\001" +
    "\002\000\010\046\014\067\013\070\031\001\002\000\052" +
    "\010\017\011\023\022\011\026\050\037\004\040\007\043" +
    "\024\045\005\047\020\053\047\056\033\063\032\064\012" +
    "\065\021\066\027\071\006\072\034\073\022\074\026\075" +
    "\016\001\002\000\010\002\001\005\057\027\001\001\002" +
    "\000\006\004\ufffe\005\ufffe\001\002\000\004\022\202\001" +
    "\002\000\024\023\204\034\140\035\133\036\141\044\136" +
    "\057\135\060\134\062\132\074\131\001\002\000\006\023" +
    "\ufff7\031\ufff7\001\002\000\004\026\050\001\002\000\006" +
    "\023\213\031\212\001\002\000\006\033\207\074\210\001" +
    "\002\000\004\074\211\001\002\000\006\023\ufff5\031\ufff5" +
    "\001\002\000\006\023\ufff6\031\ufff6\001\002\000\022\034" +
    "\140\035\133\036\141\044\136\057\135\060\134\062\132" +
    "\074\131\001\002\000\004\026\050\001\002\000\006\004" +
    "\ufffa\005\ufffa\001\002\000\006\023\ufff8\031\ufff8\001\002" +
    "\000\006\004\ufff9\005\ufff9\001\002\000\004\074\220\001" +
    "\002\000\006\004\ufffc\005\ufffc\001\002\000\016\002\uffe1" +
    "\005\uffe1\027\uffe1\051\uffe1\052\uffe1\055\uffe1\001\002\000" +
    "\004\023\223\001\002\000\072\002\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\041\uffc4\042" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\055\uffc4\001\002" +
    "\000\016\002\uffdd\005\uffdd\027\uffdd\051\uffdd\052\uffdd\055" +
    "\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\036\002\027\003\014\004\034\012\007\013" +
    "\043\016\024\017\045\020\044\021\042\022\041\023\040" +
    "\024\037\025\036\026\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\017\223\020\044\021\042\022\041" +
    "\023\040\024\037\025\036\026\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\017\221\020\044\021\042" +
    "\022\041\023\040\024\037\025\036\026\035\001\001\000" +
    "\022\017\220\020\044\021\042\022\041\023\040\024\037" +
    "\025\036\026\035\001\001\000\004\007\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\173\025\036\026\035\001\001\000\022\017\164\020" +
    "\044\021\042\022\041\023\040\024\037\025\036\026\035" +
    "\001\001\000\022\017\163\020\044\021\042\022\041\023" +
    "\040\024\037\025\036\026\035\001\001\000\002\001\001" +
    "\000\006\025\162\026\035\001\001\000\012\023\161\024" +
    "\037\025\036\026\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\136\001\001\000\022\017\127\020\044\021\042\022\041" +
    "\023\040\024\037\025\036\026\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\105\001" +
    "\001\000\002\001\001\000\004\030\075\001\001\000\002" +
    "\001\001\000\004\031\066\001\001\000\002\001\001\000" +
    "\022\017\052\020\044\021\042\022\041\023\040\024\037" +
    "\025\036\026\035\001\001\000\036\002\050\003\014\004" +
    "\034\012\007\013\043\016\024\017\045\020\044\021\042" +
    "\022\041\023\040\024\037\025\036\026\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\012\055\013\043\014\054\016\024\017\045\020\044\021" +
    "\042\022\041\023\040\024\037\025\036\026\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\013\057\016" +
    "\024\017\045\020\044\021\042\022\041\023\040\024\037" +
    "\025\036\026\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\017\062\020\044\021\042\022\041\023\040" +
    "\024\037\025\036\026\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\017\102\020\044\021\042\022\041" +
    "\023\040\024\037\025\036\026\035\001\001\000\020\020" +
    "\101\021\042\022\041\023\040\024\037\025\036\026\035" +
    "\001\001\000\016\021\070\022\041\023\040\024\037\025" +
    "\036\026\035\001\001\000\002\001\001\000\004\030\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\022\100\023\040\024\037" +
    "\025\036\026\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\107\024\037\025\036\026\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\017\113\020\044\021\042\022\041\023\040\024\037" +
    "\025\036\026\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\015\123\017\122\020\044\021\042\022\041\023" +
    "\040\024\037\025\036\026\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\015\126\017\122\020\044\021\042\022\041\023\040" +
    "\024\037\025\036\026\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\144\010\143\011" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\144\011\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\012\055\013\043\014\166\016\024" +
    "\017\045\020\044\021\042\022\041\023\040\024\037\025" +
    "\036\026\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\012\055\013\043\014\171\016\024\017\045\020" +
    "\044\021\042\022\041\023\040\024\037\025\036\026\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\177\001\001\000\030\012\176\013\043" +
    "\016\024\017\045\020\044\021\042\022\041\023\040\024" +
    "\037\025\036\026\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\204\006\202\007" +
    "\205\001\001\000\002\001\001\000\004\016\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\214\007\205" +
    "\001\001\000\004\016\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAST$actions {


   private SemOps sem = new SemOps();

  private final ConstructorAST parser;

  /** Constructor */
  CUP$ConstructorAST$actions(ConstructorAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action_part00000000(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG ::= LDECS sep_prog LINST 
            {
              Prog RESULT =null;
		LDecs ldecs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		LInst linst = (LInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.prog_con_dec(ldecs,linst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST$parser.done_parsing();
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROG ::= LINST 
            {
              Prog RESULT =null;
		LInst linst = (LInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.prog_sin_dec(linst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LDECS ::= LDECS pto_coma DEC 
            {
              LDecs RESULT =null;
		LDecs ldecs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.lista_dec_muchas(ldecs,dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LDECS",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDECS ::= DEC 
            {
              LDecs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.lista_dec_una(dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LDECS",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEC ::= r_var TIPO id 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_var(tipo,id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DEC",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEC ::= r_type TIPO id 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_type(tipo,id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DEC",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEC ::= r_proc id pap LPF pcierre BLOQ 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		LPF lpf = (LPF)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_proc_con_params(id,lpf,b); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DEC",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEC ::= r_proc id pap pcierre BLOQ 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_proc_sin_params(id,b); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DEC",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LPF ::= LPF coma PF 
            {
              LPF RESULT =null;
		LPF lpf = (LPF)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		PF pf = (PF)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param_muchas(lpf,pf); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPF",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LPF ::= PF 
            {
              LPF RESULT =null;
		PF pf = (PF)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param_una(pf); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPF",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PF ::= TIPO et id 
            {
              PF RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param_con_et(t,id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PF",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PF ::= TIPO id 
            {
              PF RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param_sin_et(t,id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PF",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= r_bool 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_Bool(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= r_real 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_Real(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= r_int 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_Entero(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= r_string 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_String(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= r_array cap lit_int ccierre r_of TIPO 
            {
              Tipo RESULT =null;
		StringLocalizado lit_int = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_Array(lit_int,t); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= r_record llap LCAMPO llcierre 
            {
              Tipo RESULT =null;
		LCampo lcampo = (LCampo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.tipo_Record(lcampo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= r_pointer TIPO 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_Pointer(t); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= id 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_Id(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LCAMPO ::= LCAMPO pto_coma CAMPO 
            {
              LCampo RESULT =null;
		LCampo lcampo = (LCampo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campo_muchas(lcampo,campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LCAMPO",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LCAMPO ::= CAMPO 
            {
              LCampo RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campo_una(campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LCAMPO",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CAMPO ::= TIPO id 
            {
              Campo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campo(t,id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("CAMPO",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LINST ::= LINST pto_coma INST 
            {
              LInst RESULT =null;
		LInst linst = (LInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.lista_inst_muchas(linst,inst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LINST",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LINST ::= INST 
            {
              LInst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.lista_inst_una(inst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LINST",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INST ::= E0 asig E0 
            {
              Inst RESULT =null;
		Exp e00 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp e01 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_asig(e00,e01); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INST ::= r_if E0 r_then AUX_LINST r_endif 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		LInst_aux aux_l = (LInst_aux)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_if_then(e0,aux_l); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INST ::= r_if E0 r_then AUX_LINST r_else AUX_LINST r_endif 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-5)).value;
		LInst_aux aux_l = (LInst_aux)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		LInst_aux aux_l_1 = (LInst_aux)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_if_then_else(e0,aux_l,aux_l_1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INST ::= r_while E0 r_do AUX_LINST r_endwhile 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		LInst_aux aux_l = (LInst_aux)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_while(e0,aux_l); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AUX_LINST ::= LINST 
            {
              LInst_aux RESULT =null;
		LInst linst = (LInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.aux_linst_una(linst); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("AUX_LINST",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AUX_LINST ::= 
            {
              LInst_aux RESULT =null;
		 RESULT = sem.aux_linst_vacia(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("AUX_LINST",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INST ::= r_read E0 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_read(e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INST ::= r_write E0 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_write(e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INST ::= r_nl 
            {
              Inst RESULT =null;
		 RESULT = sem.inst_nl(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INST ::= r_new E0 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_new(e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INST ::= r_del E0 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_delete(e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INST ::= r_call id pap LPARREG pcierre 
            {
              Inst RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		LParreg lparreg = (LParreg)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_call_con_params(id,lparreg); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INST ::= r_call id pap pcierre 
            {
              Inst RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		 RESULT = sem.inst_call_sin_params(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INST ::= BLOQ 
            {
              Inst RESULT =null;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_compuesta(b); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INST",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LPARREG ::= E0 coma LPARREG 
            {
              LParreg RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		LParreg lparreg = (LParreg)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.par_reg_muchas(e0,lparreg); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPARREG",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LPARREG ::= E0 
            {
              LParreg RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.par_reg_una(e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LPARREG",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQ ::= llap PROG llcierre 
            {
              Bloque RESULT =null;
		Prog p = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.bloque(p); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("BLOQ",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E0 ::= E1 mas E0 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp("+",e1,e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E0 ::= E1 menos E1 
            {
              Exp RESULT =null;
		Exp e10 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp e11 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp("-",e10,e11); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e1; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E1 ::= E1 OPBAI1 E2 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op,e1,e2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e2; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E2 ::= E2 OPBAI2 E3 
            {
              Exp RESULT =null;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op,e2,e3); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e3; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E3 ::= E4 OPBNA E4 
            {
              Exp RESULT =null;
		Exp e40 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp e41 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op,e40,e41); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp e4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e4; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E4 ::= menos E5 
            {
              Exp RESULT =null;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.menos_unario(e5); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E4 ::= r_not E4 
            {
              Exp RESULT =null;
		Exp e4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.c_not(e4); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e5; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E5 ::= E5 cap E0 ccierre 
            {
              Exp RESULT =null;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.index(e5,e0); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E5 ::= E5 punto id 
            {
              Exp RESULT =null;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.punto(e5,id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E5 ::= E5 flecha id 
            {
              Exp RESULT =null;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.flecha(e5,id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e6; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E6 ::= por E6 
            {
              Exp RESULT =null;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.indireccion(e6); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp e7 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e7; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E7 ::= pap E0 pcierre 
            {
              Exp RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = e0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E7 ::= r_null 
            {
              Exp RESULT =null;
		 RESULT = sem.c_null(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E7 ::= id 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.identificador(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E7 ::= r_false 
            {
              Exp RESULT =null;
		 RESULT = sem.c_false(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E7 ::= r_true 
            {
              Exp RESULT =null;
		 RESULT = sem.c_true(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= lit_cad 
            {
              Exp RESULT =null;
		StringLocalizado cad = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.c_str(cad); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= lit_real 
            {
              Exp RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.num_real(num); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= lit_int 
            {
              Exp RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.num_int(num); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPBNA ::= por 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBNA",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPBNA ::= div 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBNA",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPBNA ::= mod 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBNA",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPBAI2 ::= bne 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBAI2",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPBAI2 ::= beq 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBAI2",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPBAI2 ::= ble 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBAI2",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPBAI2 ::= bge 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBAI2",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPBAI2 ::= blt 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBAI2",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPBAI2 ::= bgt 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBAI2",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPBAI1 ::= r_and 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBAI1",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPBAI1 ::= r_or 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBAI1",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST$do_action_part00000000(
                               CUP$ConstructorAST$act_num,
                               CUP$ConstructorAST$parser,
                               CUP$ConstructorAST$stack,
                               CUP$ConstructorAST$top);
    }
}

