package asint;

import asint.TinyASint.*;


public interface Procesamiento {
    void procesa(Suma exp);
    void procesa(Resta exp);
    void procesa(Mul exp);
    void procesa(Div exp);
    void procesa(Id exp);
    void procesa(Num exp);
    void procesa(Dec_Var dec_var);
	void procesa(Menos_unario menos_unario);
	void procesa(Not not);
	void procesa(Beq beq);
	void procesa(Bne bne);
	void procesa(Bge bge);
	void procesa(Ble ble);
	void procesa(Blt blt);
	void procesa(Bgt bgt);
	void procesa(And and);
	void procesa(Or or);
	void procesa(R_true r_true);
	void procesa(R_false r_false);
	void procesa(LDecs_una lDecs_una);
	void procesa(LDecs_muchas lDecs_muchas);
	void procesa(Lista_inst_una lista_inst_una);
	void procesa(Lista_inst_muchas lista_inst_muchas);
	void procesa(Prog_con_dec prog);
	void procesa(Prog_sin_dec prog);
	void procesa(Inst_asig inst);
	void procesa(Tipo_int tipo_int);
	void procesa(Tipo_real tipo_real);
	void procesa(Tipo_bool tipo_bool);
	void procesa(Tipo_String tipo_String);
	void procesa(Tipo_Id tipo_Id);
	void procesa(Tipo_Pointer tipo_Pointer);
	void procesa(Tipo_Array tipo_Array);
	void procesa(Tipo_Record tipo_Record);
	void procesa(Campo_una campo_una);
	void procesa(Campo_muchas campo_muchas);
	void procesa(Campo campo);
	void procesa(Aux_linst_vacia aux_linst_vacia);
	void procesa(Aux_linst_una aux_linst_una);
	void procesa(Par_reg_vacia par_reg_vacia);
	void procesa(Par_reg_una par_reg_una);
	void procesa(Par_reg_muchas par_reg_muchas);
	void procesa(Param_sin_et param_sin_et);
	void procesa(Param_con_et param_con_et);
	void procesa(Bloque bloque);
	void procesa(Param_muchas param_muchas);
	void procesa(Param_una param_una);
	void procesa(Mod mod);
	void procesa(R_null r_null);
	void procesa(R_str r_str);
	void procesa(Index index);
	void procesa(Indireccion indireccion);
	void procesa(Punto punto);
	void procesa(Flecha flecha);
	void procesa(Dec_Type dec_type);
	void procesa(Inst_if_then inst_if_then);
	void procesa(Inst_if_then_else inst_if_then_else);
	void procesa(Inst_while inst_while);
	void procesa(Inst_read inst_read);
	void procesa(Inst_write inst_write);
	void procesa(Inst_nl inst_nl);
	void procesa(Inst_new inst_new);
	void procesa(Inst_delete inst_delete);
	void procesa(Inst_call_con_params inst_call_con_params);
	void procesa(Inst_call_sin_params inst_call_sin_params);
	void procesa(Inst_compuesta inst_compuesta);
	void procesa(Dec_proc_con_params dec_proc_con_params);  
	void procesa(Dec_proc_sin_params dec_proc_sin_params);
}