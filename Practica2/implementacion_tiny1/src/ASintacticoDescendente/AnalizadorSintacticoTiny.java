/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTiny.java */
package asint;

public class AnalizadorSintacticoTiny implements AnalizadorSintacticoTinyConstants {

  final public void SP() throws ParseException {
    PROG();
    jj_consume_token(0);
  }

  final public void PROG() throws ParseException {
    DECS();
    LINST();
  }

  final public void DECS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case r_proc:
    case r_var:
    case r_type:
      LDEC();
      jj_consume_token(44);
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  final public void LDEC() throws ParseException {
    DEC();
    RDEC();
  }

  final public void RDEC() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
      DEC();
      RDEC();
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

  final public void DEC() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case r_var:
      DEC_VAR();
      break;
    case r_type:
      DEC_TIPO();
      break;
    case r_proc:
      DEC_PROC();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DEC_VAR() throws ParseException {
    jj_consume_token(r_var);
    TIPO();
    jj_consume_token(identificador);
  }

                                                                        // TODO: Revisar que esto est√° bien acomodado, comparte final
  final public void DEC_TIPO() throws ParseException {
    jj_consume_token(r_type);
    TIPO();
    jj_consume_token(identificador);
  }

  final public void DEC_PROC() throws ParseException {
    jj_consume_token(r_proc);
    jj_consume_token(identificador);
    PARFOR();
    BLOQ();
  }

  final public void PARFOR() throws ParseException {
    jj_consume_token(46);
    LPF();
    jj_consume_token(47);
  }

  final public void LPF() throws ParseException {
    PF();
    RPF();
  }

  final public void RPF() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      jj_consume_token(48);
      PF();
      RPF();
      break;
    default:
      jj_la1[3] = jj_gen;

    }
  }

  final public void PF() throws ParseException {
    TIPO();
    RP();
    jj_consume_token(identificador);
  }

  final public void RP() throws ParseException {

  }

  final public void TIPO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case r_int:
    case r_real:
    case r_bool:
    case r_string:
      TIPO_BASICO();
      break;
    case identificador:
      TIPO_ID();
      break;
    case r_array:
      TIPO_ARRAY();
      break;
    case r_record:
      TIPO_RECORD();
      break;
    case r_pointer:
      TIPO_POINTER();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TIPO_BASICO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case r_int:
      jj_consume_token(r_int);
      break;
    case r_real:
      jj_consume_token(r_real);
      break;
    case r_bool:
      jj_consume_token(r_bool);
      break;
    case r_string:
      jj_consume_token(r_string);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TIPO_ID() throws ParseException {
    jj_consume_token(identificador);
  }

  final public void TIPO_ARRAY() throws ParseException {
    jj_consume_token(r_array);
    TAM();
    jj_consume_token(r_of);
    TIPO();
  }

  final public void TAM() throws ParseException {
    jj_consume_token(50);
    jj_consume_token(numeroEntero);
    jj_consume_token(51);
  }

  final public void TIPO_RECORD() throws ParseException {
    jj_consume_token(r_record);
    jj_consume_token(52);
    LCAMPO();
    jj_consume_token(53);
  }

  final public void LCAMPO() throws ParseException {
    CAMPO();
    RCAMPO();
  }

  final public void RCAMPO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
      CAMPO();
      RCAMPO();
      break;
    default:
      jj_la1[6] = jj_gen;

    }
  }

  final public void CAMPO() throws ParseException {
    TIPO();
    jj_consume_token(identificador);
  }

  final public void TIPO_POINTER() throws ParseException {
    jj_consume_token(r_pointer);
    TIPO();
  }

  final public void LINST() throws ParseException {
    INST();
    RINST();
  }

  final public void RINST() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
      INST();
      RINST();
      break;
    default:
      jj_la1[7] = jj_gen;

    }
  }

  final public void AUX_LINST() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case r_not:
    case r_if:
    case r_while:
    case r_call:
    case r_new:
    case r_read:
    case r_write:
    case r_nl:
    case 52:
    case 55:
    case 57:
      LINST();
      break;
    default:
      jj_la1[8] = jj_gen;

    }
  }

  final public void INST() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case r_not:
    case 55:
    case 57:
      INST_ASIG();
      break;
    case r_if:
      INST_IF();
      break;
    case r_while:
      INST_WHILE();
      break;
    case r_read:
      INST_READ();
      break;
    case r_write:
      INST_WRITE();
      break;
    case r_nl:
      INST_NL();
      break;
    case r_new:
      INST_NEW();
      break;
    case r_call:
      INST_CALL();
      break;
    case 52:
      INST_BLOQ();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void INST_ASIG() throws ParseException {
    E0();
    jj_consume_token(54);
    E0();
  }

  final public void INST_IF() throws ParseException {
    jj_consume_token(r_if);
    E0();
    jj_consume_token(r_then);
    AUX_LINST();
    INST_RIF();
    jj_consume_token(r_endif);
  }

  final public void INST_RIF() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case r_else:
      jj_consume_token(r_else);
      AUX_LINST();
      break;
    default:
      jj_la1[10] = jj_gen;

    }
  }

  final public void INST_WHILE() throws ParseException {
    jj_consume_token(r_while);
    E0();
    jj_consume_token(r_do);
    AUX_LINST();
    jj_consume_token(r_endwhile);
  }

  final public void INST_READ() throws ParseException {
    jj_consume_token(r_read);
    E0();
  }

  final public void INST_WRITE() throws ParseException {
    jj_consume_token(r_write);
    E0();
  }

  final public void INST_NL() throws ParseException {
    jj_consume_token(r_nl);
  }

  final public void INST_NEW() throws ParseException {
    jj_consume_token(r_new);
    E0();
  }

  final public void INST_CALL() throws ParseException {
    jj_consume_token(r_call);
    jj_consume_token(identificador);
    PARREL();
  }

  final public void PARREL() throws ParseException {
    jj_consume_token(46);
    LEREL();
    jj_consume_token(47);
  }

  final public void LEREL() throws ParseException {
    E0();
    REREL();
  }

  final public void REREL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      jj_consume_token(48);
      E0();
      REREL();
      break;
    default:
      jj_la1[11] = jj_gen;

    }
  }

  final public void INST_BLOQ() throws ParseException {
    BLOQ();
  }

  final public void BLOQ() throws ParseException {
    jj_consume_token(52);
    PROG();
    jj_consume_token(53);
  }

  final public void E0() throws ParseException {
    E1();
    RE0();
  }

  final public void RE0() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      E0();
      break;
    case 56:
      jj_consume_token(56);
      E1();
      break;
    default:
      jj_la1[12] = jj_gen;

    }
  }

  final public void E1() throws ParseException {
    E2();
    RE1();
  }

  final public void RE1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case r_and:
    case r_or:
      OPBAI1();
      E2();
      RE1();
      break;
    default:
      jj_la1[13] = jj_gen;

    }
  }

  final public void E2() throws ParseException {
    E3();
    RE2();
  }

  final public void RE2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      OPBAI2();
      E3();
      RE2();
      break;
    default:
      jj_la1[14] = jj_gen;

    }
  }

  final public void E3() throws ParseException {
    E4();
    RE3();
  }

  final public void RE3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
    case 64:
    case 65:
      OPBNA();
      E4();
      RE3();
      break;
    default:
      jj_la1[15] = jj_gen;

    }
  }

  final public void E4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      E5();
      break;
    case r_not:
      jj_consume_token(r_not);
      E4();
      break;
    case 57:
      E5();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E5() throws ParseException {
    E6();
    RE5();
  }

  final public void RE5() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
    case 66:
    case 67:
      OP5();
      RE5();
      break;
    default:
      jj_la1[17] = jj_gen;

    }
  }

  final public void E6() throws ParseException {
    jj_consume_token(57);
    E6();
  }

  final public void RE6() throws ParseException {
    E7();
  }

  final public void E7() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numeroEntero:
      jj_consume_token(numeroEntero);
      break;
    case numeroReal:
      jj_consume_token(numeroReal);
      break;
    case cadena:
      jj_consume_token(cadena);
      break;
    case r_true:
      jj_consume_token(r_true);
      break;
    case r_false:
      jj_consume_token(r_false);
      break;
    case identificador:
      jj_consume_token(identificador);
      break;
    case r_null:
      jj_consume_token(r_null);
      break;
    case 46:
      jj_consume_token(46);
      E0();
      jj_consume_token(47);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OPBAI1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case r_and:
      jj_consume_token(r_and);
      break;
    case r_or:
      jj_consume_token(r_or);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OPBAI2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
      break;
    case 59:
      jj_consume_token(59);
      break;
    case 60:
      jj_consume_token(60);
      break;
    case 61:
      jj_consume_token(61);
      break;
    case 62:
      jj_consume_token(62);
      break;
    case 63:
      jj_consume_token(63);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OPBNA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
      jj_consume_token(57);
      break;
    case 64:
      jj_consume_token(64);
      break;
    case 65:
      jj_consume_token(65);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OP5() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      OPINDEX();
      break;
    case 66:
    case 67:
      OPACCREG();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OPINDEX() throws ParseException {
    jj_consume_token(50);
    E0();
    jj_consume_token(51);
  }

  final public void OPACCREG() throws ParseException {
    ACC();
    jj_consume_token(identificador);
  }

  final public void ACC() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
      jj_consume_token(66);
      break;
    case 67:
      jj_consume_token(67);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  public AnalizadorSintacticoTinyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x100000,0x0,0x100000,0x0,0x60041c00,0x41c00,0x0,0x0,0x12220000,0x12220000,0x800000,0x0,0x0,0x18000,0x0,0x0,0x20000,0x0,0x86000,0x18000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0xc0,0x2000,0xc0,0x10000,0x101,0x0,0x2000,0x2000,0x290003a,0x290003a,0x0,0x10000,0x1800000,0x0,0xfc000000,0x2000000,0x2800000,0x40000,0x4f00,0x0,0xfc000000,0x2000000,0x40000,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0xc,0x0,0x0,0x0,0x3,0xc,0xc,};
   }

  public AnalizadorSintacticoTiny(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  public AnalizadorSintacticoTiny(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  public AnalizadorSintacticoTiny(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  public void ReInit(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[68];
    for (int i = 0; i < 68; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

                                      }
