
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 27 22:03:46 CEST 2022
//----------------------------------------------------

package asintAsc;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 27 22:03:46 CEST 2022
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\003\005\000\002\003\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\005\000\002\007\005\000\002\010\006\000\002" +
    "\011\005\000\002\012\005\000\002\012\003\000\002\012" +
    "\002\000\002\013\004\000\002\013\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\003\000\002\017" +
    "\006\000\002\022\005\000\002\020\006\000\002\023\005" +
    "\000\002\023\003\000\002\024\004\000\002\021\004\000" +
    "\002\025\005\000\002\025\003\000\002\062\003\000\002" +
    "\062\002\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\027\005\000\002\030\007\000\002" +
    "\031\011\000\002\032\007\000\002\033\004\000\002\034" +
    "\004\000\002\035\003\000\002\036\004\000\002\037\005" +
    "\000\002\041\005\000\002\042\005\000\002\042\003\000" +
    "\002\042\002\000\002\040\003\000\002\043\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\003\000\002\045" +
    "\005\000\002\045\003\000\002\046\005\000\002\046\003" +
    "\000\002\047\005\000\002\047\003\000\002\050\004\000" +
    "\002\050\004\000\002\050\003\000\002\051\004\000\002" +
    "\051\004\000\002\051\003\000\002\052\004\000\002\052" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\005\000\002\054\003\000\002" +
    "\054\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\057\005\000\002\060\004\000\002\061\003\000\002" +
    "\061\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\056\010\ufffe\011\ufffe\022\ufffe\026\ufffe\037" +
    "\ufffe\040\ufffe\043\ufffe\045\ufffe\046\011\047\ufffe\053\ufffe" +
    "\056\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\007\070" +
    "\013\071\ufffe\072\ufffe\073\ufffe\074\ufffe\001\002\000\006" +
    "\004\ufffb\005\ufffb\001\002\000\006\004\245\005\244\001" +
    "\002\000\006\004\ufffa\005\ufffa\001\002\000\022\034\027" +
    "\035\021\036\032\044\025\057\023\060\022\062\017\071" +
    "\016\001\002\000\050\010\112\011\117\022\102\026\072" +
    "\037\075\040\077\043\120\045\076\047\113\053\142\056" +
    "\125\063\124\064\103\065\114\066\123\071\122\072\111" +
    "\073\126\074\116\001\002\000\004\071\055\001\002\000" +
    "\004\002\054\001\002\000\022\034\027\035\021\036\032" +
    "\044\025\057\023\060\022\062\017\071\016\001\002\000" +
    "\006\004\ufffc\005\ufffc\001\002\000\006\004\ufff9\005\ufff9" +
    "\001\002\000\006\033\uffe6\071\uffe6\001\002\000\022\034" +
    "\027\035\021\036\032\044\025\057\023\060\022\062\017" +
    "\071\016\001\002\000\006\033\uffec\071\uffec\001\002\000" +
    "\006\033\uffea\071\uffea\001\002\000\004\024\046\001\002" +
    "\000\004\026\035\001\002\000\006\033\uffee\071\uffee\001" +
    "\002\000\006\033\uffe7\071\uffe7\001\002\000\004\071\034" +
    "\001\002\000\006\033\uffe9\071\uffe9\001\002\000\006\033" +
    "\uffef\071\uffef\001\002\000\006\033\uffeb\071\uffeb\001\002" +
    "\000\006\033\uffe8\071\uffe8\001\002\000\006\033\uffed\071" +
    "\uffed\001\002\000\006\004\ufff7\005\ufff7\001\002\000\022" +
    "\034\027\035\021\036\032\044\025\057\023\060\022\062" +
    "\017\071\016\001\002\000\006\005\042\027\043\001\002" +
    "\000\006\005\uffe1\027\uffe1\001\002\000\004\071\041\001" +
    "\002\000\006\005\uffe0\027\uffe0\001\002\000\022\034\027" +
    "\035\021\036\032\044\025\057\023\060\022\062\017\071" +
    "\016\001\002\000\006\033\uffe3\071\uffe3\001\002\000\006" +
    "\005\uffe2\027\uffe2\001\002\000\004\061\051\001\002\000" +
    "\004\072\047\001\002\000\004\025\050\001\002\000\004" +
    "\061\uffe4\001\002\000\022\034\027\035\021\036\032\044" +
    "\025\057\023\060\022\062\017\071\016\001\002\000\006" +
    "\033\uffe5\071\uffe5\001\002\000\006\033\uffdf\071\uffdf\001" +
    "\002\000\004\002\000\001\002\000\004\022\057\001\002" +
    "\000\004\026\072\001\002\000\026\023\ufff2\031\ufff2\034" +
    "\027\035\021\036\032\044\025\057\023\060\022\062\017" +
    "\071\016\001\002\000\006\023\ufff3\031\ufff3\001\002\000" +
    "\006\023\067\031\066\001\002\000\006\033\063\071\064" +
    "\001\002\000\004\071\065\001\002\000\006\023\ufff1\031" +
    "\ufff1\001\002\000\006\023\ufff0\031\ufff0\001\002\000\022" +
    "\034\027\035\021\036\032\044\025\057\023\060\022\062" +
    "\017\071\016\001\002\000\004\026\ufff5\001\002\000\006" +
    "\023\ufff4\031\ufff4\001\002\000\006\004\ufff6\005\ufff6\001" +
    "\002\000\056\010\ufffe\011\ufffe\022\ufffe\026\ufffe\037\ufffe" +
    "\040\ufffe\043\ufffe\045\ufffe\046\011\047\ufffe\053\ufffe\056" +
    "\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\007\070\013" +
    "\071\ufffe\072\ufffe\073\ufffe\074\ufffe\001\002\000\004\027" +
    "\074\001\002\000\020\002\uffc2\004\uffc2\005\uffc2\027\uffc2" +
    "\051\uffc2\052\uffc2\055\uffc2\001\002\000\072\002\uffae\005" +
    "\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\023" +
    "\uffae\024\uffae\025\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\041\uffae\042\uffae\050\uffae\051\uffae\052\uffae\054\uffae\055" +
    "\uffae\001\002\000\072\002\uffaa\005\uffaa\006\uffaa\007\uffaa" +
    "\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\041\uffaa\042\uffaa\050" +
    "\uffaa\051\uffaa\052\uffaa\054\uffaa\055\uffaa\001\002\000\072" +
    "\002\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\023\uffad\024\uffad\025\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\041\uffad\042\uffad\050\uffad\051\uffad\052\uffad" +
    "\054\uffad\055\uffad\001\002\000\016\002\uffd2\005\uffd2\027" +
    "\uffd2\051\uffd2\052\uffd2\055\uffd2\001\002\000\010\002\001" +
    "\005\151\027\001\001\002\000\030\010\112\011\117\022" +
    "\102\037\075\040\077\043\120\045\076\071\122\072\111" +
    "\073\126\074\116\001\002\000\030\010\112\011\117\022" +
    "\102\037\075\040\077\043\120\045\076\071\122\072\111" +
    "\073\126\074\116\001\002\000\016\002\uffda\005\uffda\027" +
    "\uffda\051\uffda\052\uffda\055\uffda\001\002\000\016\002\uffd3" +
    "\005\uffd3\027\uffd3\051\uffd3\052\uffd3\055\uffd3\001\002\000" +
    "\016\002\uffd8\005\uffd8\027\uffd8\051\uffd8\052\uffd8\055\uffd8" +
    "\001\002\000\016\002\uffd5\005\uffd5\027\uffd5\051\uffd5\052" +
    "\uffd5\055\uffd5\001\002\000\016\002\uffd1\005\uffd1\027\uffd1" +
    "\051\uffd1\052\uffd1\055\uffd1\001\002\000\072\002\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\041\uffb0\042\uffb0\050\uffb0\051\uffb0\052\uffb0\054\uffb0\055" +
    "\uffb0\001\002\000\024\011\117\022\102\037\075\040\077" +
    "\045\076\071\122\072\111\073\126\074\116\001\002\000" +
    "\030\010\112\011\117\022\102\037\075\040\077\043\120" +
    "\045\076\071\122\072\111\073\126\074\116\001\002\000" +
    "\030\010\112\011\117\022\102\037\075\040\077\043\120" +
    "\045\076\071\122\072\111\073\126\074\116\001\002\000" +
    "\016\002\uffd6\005\uffd6\027\uffd6\051\uffd6\052\uffd6\055\uffd6" +
    "\001\002\000\072\002\uffac\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\023\uffac\024\uffac\025\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\041\uffac\042\uffac\050\uffac" +
    "\051\uffac\052\uffac\054\uffac\055\uffac\001\002\000\022\022" +
    "\102\037\075\040\077\045\076\071\122\072\111\073\126" +
    "\074\116\001\002\000\030\010\112\011\117\022\102\037" +
    "\075\040\077\043\120\045\076\071\122\072\111\073\126" +
    "\074\116\001\002\000\016\002\uffc3\005\uffc3\027\uffc3\051" +
    "\uffc3\052\uffc3\055\uffc3\001\002\000\072\002\uffab\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\023\uffab" +
    "\024\uffab\025\uffab\027\uffab\030\uffab\031\uffab\032\uffab\041" +
    "\uffab\042\uffab\050\uffab\051\uffab\052\uffab\054\uffab\055\uffab" +
    "\001\002\000\016\002\uffca\005\uffca\027\uffca\051\uffca\052" +
    "\uffca\055\uffca\001\002\000\030\010\112\011\117\022\102" +
    "\037\075\040\077\043\120\045\076\071\122\072\111\073" +
    "\126\074\116\001\002\000\004\071\213\001\002\000\072" +
    "\002\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\023\uffaf\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\041\uffaf\042\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\054\uffaf\055\uffaf\001\002\000\016\002\uffd7\005\uffd7\027" +
    "\uffd7\051\uffd7\052\uffd7\055\uffd7\001\002\000\072\002\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\041\uffb1\042\uffb1\050\uffb1\051\uffb1\052\uffb1\054\uffb1" +
    "\055\uffb1\001\002\000\072\002\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3" +
    "\016\uffb3\017\uffb3\020\uffb3\021\uffb3\023\uffb3\024\uffb3\025" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\041\uffb3\042\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\054\uffb3\055\uffb3\001\002\000" +
    "\072\002\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6" +
    "\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\023\uffb6\024\204\025\uffb6\027\uffb6\030\203" +
    "\031\uffb6\032\202\041\uffb6\042\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\054\uffb6\055\uffb6\001\002\000\064\002\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\010\uffb9\011\175\012\200\013\176\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\023\uffb9" +
    "\025\uffb9\027\uffb9\031\uffb9\041\uffb9\042\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\054\uffb9\055\uffb9\001\002\000\056\002\uffbb" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\023\uffbb\025\uffbb\027\uffbb" +
    "\031\uffbb\041\uffbb\042\uffbb\050\uffbb\051\uffbb\052\uffbb\054" +
    "\uffbb\055\uffbb\001\002\000\016\002\uffd4\005\uffd4\027\uffd4" +
    "\051\uffd4\052\uffd4\055\uffd4\001\002\000\056\002\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\014\164\015\166\016\170" +
    "\017\171\020\165\021\163\023\uffbd\025\uffbd\027\uffbd\031" +
    "\uffbd\041\uffbd\042\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd" +
    "\055\uffbd\001\002\000\016\002\uffdd\005\uffdd\027\uffdd\051" +
    "\uffdd\052\uffdd\055\uffdd\001\002\000\042\002\uffbf\005\uffbf" +
    "\006\uffbf\007\156\010\157\023\uffbf\025\uffbf\027\uffbf\031" +
    "\uffbf\041\161\042\155\050\uffbf\051\uffbf\052\uffbf\054\uffbf" +
    "\055\uffbf\001\002\000\004\006\153\001\002\000\030\010" +
    "\112\011\117\022\102\037\075\040\077\043\120\045\076" +
    "\071\122\072\111\073\126\074\116\001\002\000\016\002" +
    "\uffd9\005\uffd9\027\uffd9\051\uffd9\052\uffd9\055\uffd9\001\002" +
    "\000\004\054\145\001\002\000\052\010\112\011\117\022" +
    "\102\026\072\037\075\040\077\043\120\045\076\047\113" +
    "\053\142\055\uffdb\056\125\063\124\064\103\065\114\066" +
    "\123\071\122\072\111\073\126\074\116\001\002\000\012" +
    "\005\151\051\uffdc\052\uffdc\055\uffdc\001\002\000\004\055" +
    "\150\001\002\000\016\002\uffcd\005\uffcd\027\uffcd\051\uffcd" +
    "\052\uffcd\055\uffcd\001\002\000\050\010\112\011\117\022" +
    "\102\026\072\037\075\040\077\043\120\045\076\047\113" +
    "\053\142\056\125\063\124\064\103\065\114\066\123\071" +
    "\122\072\111\073\126\074\116\001\002\000\016\002\uffde" +
    "\005\uffde\027\uffde\051\uffde\052\uffde\055\uffde\001\002\000" +
    "\030\010\112\011\117\022\102\037\075\040\077\043\120" +
    "\045\076\071\122\072\111\073\126\074\116\001\002\000" +
    "\016\002\uffd0\005\uffd0\027\uffd0\051\uffd0\052\uffd0\055\uffd0" +
    "\001\002\000\030\010\uffa7\011\uffa7\022\uffa7\037\uffa7\040" +
    "\uffa7\043\uffa7\045\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7" +
    "\001\002\000\030\010\112\011\117\022\102\037\075\040" +
    "\077\043\120\045\076\071\122\072\111\073\126\074\116" +
    "\001\002\000\030\010\112\011\117\022\102\037\075\040" +
    "\077\043\120\045\076\071\122\072\111\073\126\074\116" +
    "\001\002\000\030\010\112\011\117\022\102\037\075\040" +
    "\077\043\120\045\076\071\122\072\111\073\126\074\116" +
    "\001\002\000\030\010\uffa8\011\uffa8\022\uffa8\037\uffa8\040" +
    "\uffa8\043\uffa8\045\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8" +
    "\001\002\000\056\002\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\014\164\015\166\016\170\017\171\020\165\021\163" +
    "\023\uffbe\025\uffbe\027\uffbe\031\uffbe\041\uffbe\042\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\054\uffbe\055\uffbe\001\002\000\030" +
    "\010\uffa1\011\uffa1\022\uffa1\037\uffa1\040\uffa1\043\uffa1\045" +
    "\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\001\002\000\030" +
    "\010\uffa6\011\uffa6\022\uffa6\037\uffa6\040\uffa6\043\uffa6\045" +
    "\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\001\002\000\030" +
    "\010\uffa2\011\uffa2\022\uffa2\037\uffa2\040\uffa2\043\uffa2\045" +
    "\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\001\002\000\030" +
    "\010\uffa5\011\uffa5\022\uffa5\037\uffa5\040\uffa5\043\uffa5\045" +
    "\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\001\002\000\030" +
    "\010\112\011\117\022\102\037\075\040\077\043\120\045" +
    "\076\071\122\072\111\073\126\074\116\001\002\000\030" +
    "\010\uffa4\011\uffa4\022\uffa4\037\uffa4\040\uffa4\043\uffa4\045" +
    "\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\001\002\000\030" +
    "\010\uffa3\011\uffa3\022\uffa3\037\uffa3\040\uffa3\043\uffa3\045" +
    "\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\001\002\000\056" +
    "\002\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\023\uffbc\025\uffbc" +
    "\027\uffbc\031\uffbc\041\uffbc\042\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\054\uffbc\055\uffbc\001\002\000\036\002\uffc0\005\uffc0" +
    "\006\uffc0\023\uffc0\025\uffc0\027\uffc0\031\uffc0\041\161\042" +
    "\155\050\uffc0\051\uffc0\052\uffc0\054\uffc0\055\uffc0\001\002" +
    "\000\032\002\uffc1\005\uffc1\006\uffc1\023\uffc1\025\uffc1\027" +
    "\uffc1\031\uffc1\050\uffc1\051\uffc1\052\uffc1\054\uffc1\055\uffc1" +
    "\001\002\000\030\010\uffa0\011\uffa0\022\uffa0\037\uffa0\040" +
    "\uffa0\043\uffa0\045\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0" +
    "\001\002\000\030\010\uff9e\011\uff9e\022\uff9e\037\uff9e\040" +
    "\uff9e\043\uff9e\045\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e" +
    "\001\002\000\030\010\112\011\117\022\102\037\075\040" +
    "\077\043\120\045\076\071\122\072\111\073\126\074\116" +
    "\001\002\000\030\010\uff9f\011\uff9f\022\uff9f\037\uff9f\040" +
    "\uff9f\043\uff9f\045\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f" +
    "\001\002\000\056\002\uffba\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\023\uffba\025\uffba\027\uffba\031\uffba\041\uffba\042\uffba\050" +
    "\uffba\051\uffba\052\uffba\054\uffba\055\uffba\001\002\000\004" +
    "\071\uff9b\001\002\000\004\071\uff9a\001\002\000\030\010" +
    "\112\011\117\022\102\037\075\040\077\043\120\045\076" +
    "\071\122\072\111\073\126\074\116\001\002\000\072\002" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\041\uffb5\042\uffb5\050\uffb5\051\uffb5\052\uffb5\054" +
    "\uffb5\055\uffb5\001\002\000\004\071\210\001\002\000\072" +
    "\002\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\023\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\041\uffb4\042\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\054\uffb4\055\uffb4\001\002\000\072\002\uff9c\005\uff9c\006" +
    "\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c" +
    "\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\023\uff9c\024" +
    "\uff9c\025\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\041\uff9c" +
    "\042\uff9c\050\uff9c\051\uff9c\052\uff9c\054\uff9c\055\uff9c\001" +
    "\002\000\004\025\212\001\002\000\072\002\uff9d\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\023\uff9d" +
    "\024\uff9d\025\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\041" +
    "\uff9d\042\uff9d\050\uff9d\051\uff9d\052\uff9d\054\uff9d\055\uff9d" +
    "\001\002\000\004\022\214\001\002\000\032\010\112\011" +
    "\117\022\102\023\uffc4\037\075\040\077\043\120\045\076" +
    "\071\122\072\111\073\126\074\116\001\002\000\016\002" +
    "\uffc8\005\uffc8\027\uffc8\051\uffc8\052\uffc8\055\uffc8\001\002" +
    "\000\004\023\222\001\002\000\006\023\uffc5\031\220\001" +
    "\002\000\032\010\112\011\117\022\102\023\uffc4\037\075" +
    "\040\077\043\120\045\076\071\122\072\111\073\126\074" +
    "\116\001\002\000\004\023\uffc6\001\002\000\016\002\uffc7" +
    "\005\uffc7\027\uffc7\051\uffc7\052\uffc7\055\uffc7\001\002\000" +
    "\016\002\uffc9\005\uffc9\027\uffc9\051\uffc9\052\uffc9\055\uffc9" +
    "\001\002\000\064\002\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\023\uffb7\025\uffb7\027\uffb7\031" +
    "\uffb7\041\uffb7\042\uffb7\050\uffb7\051\uffb7\052\uffb7\054\uffb7" +
    "\055\uffb7\001\002\000\072\002\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\041\uffb2\042\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\054\uffb2\055\uffb2\001\002\000" +
    "\016\002\uffcb\005\uffcb\027\uffcb\051\uffcb\052\uffcb\055\uffcb" +
    "\001\002\000\004\050\230\001\002\000\054\010\112\011" +
    "\117\022\102\026\072\037\075\040\077\043\120\045\076" +
    "\047\113\051\uffdb\052\uffdb\053\142\056\125\063\124\064" +
    "\103\065\114\066\123\071\122\072\111\073\126\074\116" +
    "\001\002\000\006\051\233\052\232\001\002\000\016\002" +
    "\uffcf\005\uffcf\027\uffcf\051\uffcf\052\uffcf\055\uffcf\001\002" +
    "\000\052\010\112\011\117\022\102\026\072\037\075\040" +
    "\077\043\120\045\076\047\113\052\uffdb\053\142\056\125" +
    "\063\124\064\103\065\114\066\123\071\122\072\111\073" +
    "\126\074\116\001\002\000\004\052\235\001\002\000\016" +
    "\002\uffce\005\uffce\027\uffce\051\uffce\052\uffce\055\uffce\001" +
    "\002\000\072\002\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\023\uffb8\024\204\025\uffb8\027\uffb8" +
    "\030\203\031\uffb8\032\202\041\uffb8\042\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\054\uffb8\055\uffb8\001\002\000\016\002\uffcc" +
    "\005\uffcc\027\uffcc\051\uffcc\052\uffcc\055\uffcc\001\002\000" +
    "\004\023\241\001\002\000\072\002\uffa9\005\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\023\uffa9\024\uffa9" +
    "\025\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\041\uffa9\042" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\054\uffa9\055\uffa9\001\002" +
    "\000\004\071\243\001\002\000\006\004\ufff8\005\ufff8\001" +
    "\002\000\010\046\011\067\007\070\013\001\002\000\050" +
    "\010\uffff\011\uffff\022\uffff\026\uffff\037\uffff\040\uffff\043" +
    "\uffff\045\uffff\047\uffff\053\uffff\056\uffff\063\uffff\064\uffff" +
    "\065\uffff\066\uffff\071\uffff\072\uffff\073\uffff\074\uffff\001" +
    "\002\000\006\004\ufffd\005\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\020\002\011\003\004\004\007\005\013\006" +
    "\003\007\005\010\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\241\015\027\016" +
    "\023\017\032\020\017\021\030\001\001\000\054\025\100" +
    "\026\136\027\103\030\142\031\105\032\126\033\114\034" +
    "\106\035\134\036\104\037\077\040\107\043\120\044\140" +
    "\045\137\046\135\047\133\050\132\051\131\052\130\053" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\025\015\027\016\023\017\032\020\017\021\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\052\015\027\016\023\017\032\020\017\021" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\014\037\015\027\016\023" +
    "\017\032\020\017\021\030\023\035\024\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\014\037\015\027\016\023\017\032\020" +
    "\017\021\030\024\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\051\015\027\016\023" +
    "\017\032\020\017\021\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\055\001\001" +
    "\000\004\043\070\001\001\000\022\012\060\013\057\014" +
    "\061\015\027\016\023\017\032\020\017\021\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\067\014\061\015\027\016\023\017\032\020\017\021" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\072\003\004\004\007\005\013\006" +
    "\003\007\005\010\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\044\237" +
    "\045\137\046\135\047\133\050\132\051\131\052\130\053" +
    "\127\001\001\000\022\044\236\045\137\046\135\047\133" +
    "\050\132\051\131\052\130\053\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\051\235\052" +
    "\130\053\127\001\001\000\022\044\226\045\137\046\135" +
    "\047\133\050\132\051\131\052\130\053\127\001\001\000" +
    "\022\044\225\045\137\046\135\047\133\050\132\051\131" +
    "\052\130\053\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\224\001\001\000\012\050\223\051\131" +
    "\052\130\053\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\044\222\045\137\046\135" +
    "\047\133\050\132\051\131\052\130\053\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\057\204\060\206\061" +
    "\205\001\001\000\004\056\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\166\001\001\000\002\001" +
    "\001\000\004\054\157\001\001\000\002\001\001\000\022" +
    "\044\143\045\137\046\135\047\133\050\132\051\131\052" +
    "\130\053\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\025\145\026\136\027\103\030\142\031\105\032" +
    "\126\033\114\034\106\035\134\036\104\037\077\040\107" +
    "\043\120\044\140\045\137\046\135\047\133\050\132\051" +
    "\131\052\130\053\127\062\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\026\151\027" +
    "\103\030\142\031\105\032\126\033\114\034\106\035\134" +
    "\036\104\037\077\040\107\043\120\044\140\045\137\046" +
    "\135\047\133\050\132\051\131\052\130\053\127\001\001" +
    "\000\002\001\001\000\022\044\153\045\137\046\135\047" +
    "\133\050\132\051\131\052\130\053\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\044\173\045\137\046" +
    "\135\047\133\050\132\051\131\052\130\053\127\001\001" +
    "\000\020\045\172\046\135\047\133\050\132\051\131\052" +
    "\130\053\127\001\001\000\016\046\161\047\133\050\132" +
    "\051\131\052\130\053\127\001\001\000\002\001\001\000" +
    "\004\055\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\047\171\050" +
    "\132\051\131\052\130\053\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\050\200\051\131\052\130\053\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\044\210\045\137\046\135\047\133\050" +
    "\132\051\131\052\130\053\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\214\001\001" +
    "\000\024\042\215\044\216\045\137\046\135\047\133\050" +
    "\132\051\131\052\130\053\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\042\220\044" +
    "\216\045\137\046\135\047\133\050\132\051\131\052\130" +
    "\053\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\025\145\026\136\027" +
    "\103\030\142\031\105\032\126\033\114\034\106\035\134" +
    "\036\104\037\077\040\107\043\120\044\140\045\137\046" +
    "\135\047\133\050\132\051\131\052\130\053\127\062\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\025" +
    "\145\026\136\027\103\030\142\031\105\032\126\033\114" +
    "\034\106\035\134\036\104\037\077\040\107\043\120\044" +
    "\140\045\137\046\135\047\133\050\132\051\131\052\130" +
    "\053\127\062\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\057\204\060\206\061\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\245\006\003\007\005" +
    "\010\014\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG ::= DECS LINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PROG",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECS ::= LDEC sep_prog 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECS",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECS",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDEC ::= LDEC pto_coma DEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDEC",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LDEC ::= DEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDEC",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEC ::= DEC_VAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEC",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEC ::= DEC_TIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEC",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEC ::= DEC_PROC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEC",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEC_VAR ::= r_var TIPO id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEC_VAR",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEC_TIPO ::= r_type TIPO id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEC_TIPO",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEC_PROC ::= r_proc id PARFOR BLOQ 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEC_PROC",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARFOR ::= pap LPF pcierre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARFOR",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LPF ::= LPF coma PF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LPF",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LPF ::= PF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LPF",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LPF ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LPF",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PF ::= TIPO id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PF",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PF ::= TIPO et id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PF",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= TIPO_BASICO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= TIPO_ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= TIPO_ARRAY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= TIPO_RECORD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= TIPO_POINTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_BASICO ::= r_real 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_BASICO ::= r_int 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_BASICO ::= r_bool 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO_BASICO ::= r_string 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_ID ::= id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ID",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO_ARRAY ::= r_array TAM r_of TIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARRAY",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TAM ::= cap lit_int ccierre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TAM",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO_RECORD ::= r_record llap LCAMPO llcierre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_RECORD",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LCAMPO ::= LCAMPO pto_coma CAMPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LCAMPO",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LCAMPO ::= CAMPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LCAMPO",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CAMPO ::= TIPO id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPO",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_POINTER ::= r_pointer TIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_POINTER",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LINST ::= LINST pto_coma INST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LINST",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LINST ::= INST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LINST",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AUX_LINST ::= LINST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AUX_LINST",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AUX_LINST ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("AUX_LINST",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INST ::= INST_ASIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INST ::= INST_IF_THEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST ::= INST_IF_THEN_ELSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST ::= INST_WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INST ::= INST_READ 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST ::= INST_WRITE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INST ::= INST_NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INST ::= INST_NEW 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INST ::= INST_CALL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INST ::= INST_BLOQ 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INST_ASIG ::= E0 asig E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INST_IF_THEN ::= r_if E0 r_then AUX_LINST r_endif 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF_THEN",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INST_IF_THEN_ELSE ::= r_if E0 r_then AUX_LINST r_else AUX_LINST r_endif 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF_THEN_ELSE",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INST_WHILE ::= r_while E0 r_do AUX_LINST r_endwhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_WHILE",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INST_READ ::= r_read E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_READ",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INST_WRITE ::= r_write E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_WRITE",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INST_NL ::= r_nl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_NL",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INST_NEW ::= r_new E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_NEW",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INST_CALL ::= r_call id PARREL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_CALL",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARREL ::= pap LEREL pcierre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARREL",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LEREL ::= E0 coma LEREL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEREL",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LEREL ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEREL",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LEREL ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEREL",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INST_BLOQ ::= BLOQ 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_BLOQ",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQ ::= llap PROG llcierre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E0 ::= E1 mas E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E0 ::= E1 menos E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E1 ::= E1 OPBAI1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E2 ::= E2 OPBAI2 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E3 ::= E4 OPBNA E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E4 ::= menos E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E4 ::= r_not E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E5 ::= E5 OPINDEX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E5 ::= E5 OPACCREG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E6 ::= por E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E7 ::= lit_int 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E7 ::= lit_real 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E7 ::= r_true 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E7 ::= r_false 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E7 ::= lit_cad 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E7 ::= id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E7 ::= r_null 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E7 ::= pap E0 pcierre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OPBAI1 ::= r_and 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBAI1",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OPBAI1 ::= r_or 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBAI1",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OPBAI2 ::= blt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBAI2",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OPBAI2 ::= bgt 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBAI2",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPBAI2 ::= ble 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBAI2",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPBAI2 ::= bge 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBAI2",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPBAI2 ::= beq 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBAI2",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPBAI2 ::= bne 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBAI2",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPBNA ::= por 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBNA",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPBNA ::= div 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBNA",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPBNA ::= mod 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBNA",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPINDEX ::= cap E0 ccierre 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPINDEX",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPACCREG ::= ACC id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPACCREG",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ACC ::= punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACC",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ACC ::= flecha 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ACC",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

